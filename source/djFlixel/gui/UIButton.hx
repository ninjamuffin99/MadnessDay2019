package djFlixel.gui;

import djFlixel.gui.Styles.TextStyle;
import djFlixel.tool.DataTool;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.system.FlxAssets.FlxGraphicAsset;
import flixel.input.mouse.FlxMouseEventManager;
import flixel.text.FlxText;

/**
 * Simple graphic button with 3 states ( normal | hover | pressed )
 * 
 * + Touch and Mouse button consisting of a background and a foreground.
 * + The background can be a tileset image of the 3 states, variable size
 * + The foreground can be autogenerated text, or an flxsprite
 * + Make sure the FG color of the icons is WHITE, the tinting is altered at runtime
 * 
 * -------
 * FUTURE:
 * 
 * 	- Disabled buttons
 *  - Button Toggles
 *  - Customizable border color on various states ??
 * 
 * 
 */

class UIButton extends flixel.group.FlxSpriteGroup
{
	// --
	inline static var STATE_NORMAL:Int = 0;
	inline static var STATE_HOVER:Int = 1;
	inline static var STATE_PRESS:Int = 2;
	
	
	// The default colors that are going to be replaced if you set `colorBG`
	static var TEMPLATE_COLOR_MAP:Array<Int> = [
		0xFF000000,	// DB32[0] 	-> Border
		0xFF323c39, // DB32[14] -> Dark
		0xFF9badb7, // DB32[22]	-> Main
		0xFFffffff  // DB32[21] -> Main
	];
	
	//====================================================;
	
	// -- The BG and FG elements
	var spr_bg:FlxSprite = null;
	var spr_fg:FlxSprite = null;
	
	// 0:Normal, 1:Hover, 2:Pressed
	public var current_state(default, null):Int;
	
	public var onPress:String->Void = null;
	public var onRelease:String->Void = null;
	public var onHover:String->Void = null;
	public var onOut:String->Void = null;
	
	// Currently used style for this button
	var style:Dynamic;
	
	// --
	public var id(default, null):String;
	
	// In case some graphics have 
	var stateFrames:Array<Int>;
	
	// Whether there IS an FG sprite and there are 3 colored states in the style
	var flag_fg_color_states:Bool;
	//====================================================;
	/**
	 * @param	Id a Unique string identifier
	 * @param	Style Check incode below, you can override parts
	 */
	public function new(Id:String, ?Style:Dynamic)
	{
		super();
		id = Id;
		
		style = DataTool.copyFields(Style, {
			
			// - Load a custom Button Image ::
			image:null,	// FlxGraphicAsset, If set will load this custom graphic for the background
			width:0,	// Int, Set if loading a custom image
			height:0,	// Int, set if loading a custom image
			frames:null,// Array<Int> [normal,highlight,pressed]
						// - If set it will pick these frames from the loaded `image` for the button states
			
			// - Use the built in djFlixel button image ::
			size:24,		// Loads the build-in UIButton Button Graphic
							// - Currently Available, ( 24, 32 ) in pixels
							// - WARNING : Be sure to declare the use of default assets
							// - to `project.xml`.
							// - <set name="DJFLX_UIBTN_24"/>  ,, will include assets for size=24
							// - <set name="DJFLX_UIBTN_32"/>  ,, will include assets for size=32
							
							
			// - Optional, Recolorize the imported graphic ::
			colorsBG:null,	// Array<Int> [border, dark, main, light], 4 colors
							// - If set will colorize the imported graphic to these colors
							// - Note: will recolorize the bitmap pixel-by-pixel
							// - check `TEMPLATE_COLOR_MAP` for the color values
		
			// - Place an icon from the built in djFlixel icons at the foreground ::
			// - The icon size is auto determined from the `size` parameter
			// - and it will load a smaller icon so that it fits into the box
			// - e.g. a 24pixel size button will load a 16pixel size icon
			
			icon:null, 	// String: If set will load the default icon with this name
						// - Basically calls GUI.getIcon(..)
						// - This method supports setting a shadow color and offset
							
			colorsFG:null 	// Array<Int> : [normal, high, press]
							// - note, Will alter .color field
							// - IF set will colorize the icon on the 3 states
							// - You can set just the `normal` color if you want and have
							// - the icon use the same color for all 3 states
							
			// TODO: Custom External Icon Set
						
		});
		
		// -- Load the button asset ::
		spr_bg = new FlxSprite();

		if (style.image != null) // Load a custom image
		{
			spr_bg.loadGraphic(style.image, true, style.width, style.height);
			stateFrames = style.frames;
			
		}else{ // Load from the standard asset
			spr_bg.loadGraphic("assets/uibutton_" + style.size + ".png", true, style.size, style.size, true);
			stateFrames = [0, 1, 2]; // FUTURE: If I ever add button styles, will point to other frames
		}
		
		// -- Colorize::
		if (style.colorBG!= null)
		{
			var i = 4;
			while (i-->0){
				spr_bg.replaceColor(TEMPLATE_COLOR_MAP[i], style.colorBG[i]);
			}
		}
		
		add(spr_bg);
		
		// NOTE: all FlxMouseEventManager objects are auto-removed on a state switch
		
		#if FLX_MOUSE
			// Mouse and touch
			FlxMouseEventManager.add(spr_bg, _onPress, _onRelease, _onHover, _onOut);
		#else
			// Just touch
			FlxMouseEventManager.add(spr_bg, _onPress, _onRelease);
		#end
		
		// --		
		if (style.icon != null)
		{
			// The icon size to get
			var iconSize:Int = switch(style.size){
				case 32:24;
				case 24:16;
				default:16;
			};
			var icon = Gui.getIcon(style.icon, iconSize);
			var spr = new FlxSprite(0, 0, icon);
			
			// -- Colorize the Icon	
			setFGSprite(spr);
		}
		
		_setState(0); // Initialize
	}//---------------------------------------------------;
	
	/**
	 * Set a text for the FG, takes the style into account
	 * @param	text Text
	 * @param	size fontSize
	 */
	public function setText(text:String, ?textStyle:TextStyle)
	{
		if (spr_fg != null) return;
		var t = new FlxText();
		Styles.applyTextStyle(t, textStyle);
		spr_fg = cast t;
		_setState(current_state);
	}//---------------------------------------------------;
	
	
	/**
	 * Set a sprite on top of the background
	 * @param	s the sprite
	 */
	public function setFGSprite(s:FlxSprite, autoColor:Bool = true)
	{
		spr_fg = s;
		add(spr_fg);
		// Try to center it :
		spr_fg.x = x + (spr_bg.width - spr_fg.width) / 2;
		spr_fg.y = y + (spr_bg.height - spr_fg.height) / 2;
		
		if (!autoColor) {
			flag_fg_color_states = false;
			return;
		}
		
		// NOTE: Colorizing assumes the graphic is white
		// -
		if (style.colorsFG != null)
		{
			flag_fg_color_states = (style.colorsFG[1] != null);
			spr_fg.color = style.colorsFG[0];
		}
	}//---------------------------------------------------;
	
	
	//====================================================;
	// EVENT HANDLERS 
	//====================================================;
	
	/**
	 * Change the graphics and state
	 * @param	s 0:normal, 1:hover, 2:press
	 */
	function _setState(s:Int)
	{
		spr_bg.animation.frameIndex = stateFrames[s];
		current_state = s;
		if (flag_fg_color_states) {
			spr_fg.color = style.colorsFG[s];
		}
	}//---------------------------------------------------;
	
	function _onPress(D:Dynamic)
	{
		_setState(STATE_PRESS);
		if (onPress != null) onPress(id);
	}//---------------------------------------------------;
	
	function _onRelease(D:Dynamic)
	{
		if (current_state != STATE_PRESS) return; // release from pressed
		
		// Go to hover or normal ??
		#if FLX_MOUSE 
			#if FLX_TOUCH
				// Set to hover if released by mouse
				if (FlxG.mouse.overlaps(spr_bg, spr_bg.camera))
					_setState(STATE_HOVER);
				else
					_setState(STATE_NORMAL);
			#else
				_setState(STATE_HOVER);
			#end
		#else // Just Touch
			_setState(STATE_NORMAL);
		#end
		
		if (onRelease != null) onRelease(id);
	}//---------------------------------------------------;
	
	#if FLX_MOUSE
	function _onHover(D:Dynamic)
	{
		_setState(STATE_HOVER);
		if (onHover != null) onHover(id);
	}//---------------------------------------------------;	
	
	function _onOut(D:Dynamic)
	{
		_setState(STATE_NORMAL);
		if (onOut != null) onOut(id);
	}//---------------------------------------------------;
	#end
}// --